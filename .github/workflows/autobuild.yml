name: AutoBuild ERPNext Image

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [autobuild-enhancements]
    paths:
      - 'Dockerfile'
      - 'apps.json'
      - 'scripts/**'
      - '.github/workflows/autobuild.yml'

jobs:
  build-and-push:
    runs-on: self-hosted

    env:
      DOCKER_HUB_USERNAME_SET: ${{ secrets.DOCKER_HUB_USERNAME != '' }}
      DOCKER_HUB_ACCESS_TOKEN_SET: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN != '' }}
      GITHUB_TOKEN_SET: ${{ secrets.GITHUB_TOKEN != '' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Latest ERPNext Release Tag
        id: get_erpnext_tag
        run: |
          LATEST=$(curl -s https://api.github.com/repos/frappe/erpnext/releases/latest | jq -r .tag_name)
          echo "ERPNext_VERSION_TAG=$LATEST" >> $GITHUB_ENV
          echo "FRAPPE_BRANCH_FOR_BUILD=version-$(echo $LATEST | cut -d. -f1 | sed 's/v//')" >> $GITHUB_ENV
          echo "IMAGE_TAG_VERSION=$(echo $LATEST | sed 's/v//')" >> $GITHUB_ENV

      - name: Free up disk space on runner
        run: |
          echo "Initial disk space:"
          df -h
          echo "Attempting to remove large pre-installed toolsets..."
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /usr/local/lib/android /opt/hostedtoolcache/CodeQL || true
          echo "Attempting to prune Docker system..."
          sudo docker system prune -af --volumes || true
          echo "Attempting to clean apt cache..."
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          echo "Disk space after cleanup attempts:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: env.DOCKER_HUB_USERNAME_SET == 'true' && env.DOCKER_HUB_ACCESS_TOKEN_SET == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: env.GITHUB_TOKEN_SET == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker Tags
        id: prep_tags
        run: |
          TAG=${{ env.IMAGE_TAG_VERSION }}
          MAJOR=v$(echo $TAG | cut -d. -f1)
          IMAGE_DH=geniusdynamics/erpnext
          IMAGE_GH=ghcr.io/${{ github.repository_owner }}/erpnext

          # Initialize TAGS
          TAGS=""

          # Conditionally add Docker Hub tags
          if [ "${{ env.DOCKER_HUB_USERNAME_SET }}" = "true" ] && [ "${{ env.DOCKER_HUB_ACCESS_TOKEN_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_DH:$TAG"
            TAGS="$TAGS,$IMAGE_DH:$MAJOR"
          fi

          # Conditionally add GHCR tags
          if [ "${{ env.GITHUB_TOKEN_SET }}" = "true" ]; then
            TAGS="$TAGS,$IMAGE_GH:$TAG"
            TAGS="$TAGS,$IMAGE_GH:$MAJOR"
          fi

          # Remove leading comma if present
          if [ -n "$TAGS" ]; then
            TAGS=$(echo $TAGS | sed 's/^,//')
          fi

          echo "FINAL_TAGS=${TAGS}" >> $GITHUB_ENV
          echo "BUILD_ARGS=--build-arg ERPNEXT_VERSION=${{ env.ERPNext_VERSION_TAG }} --build-arg FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH_FOR_BUILD }}" >> $GITHUB_ENV

      - name: Build and Push Image
        if: env.FINAL_TAGS != '' # Only run if tags were actually generated
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.FINAL_TAGS }}
          build-args: |
            ${{ env.BUILD_ARGS }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Summary
        run: |
          echo "✔️ Build completed for ERPNext ${{ env.ERPNext_VERSION_TAG }}"
          echo "Tags: ${{ env.FINAL_TAGS }}"
