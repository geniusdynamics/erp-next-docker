version: '3.8'

services:
  erpnext:
    image: geniusdynamics/erpnext:latest # Replace with your actual built image after a build
    container_name: erpnext_app
    restart: unless-stopped
    environment:
      # --- Database Settings (ensure these match your db service) ---
      - DB_HOST=db
      - DB_PORT=3306
      # DB_USER, DB_PASSWORD, DB_NAME are usually set within Frappe once common_site_config.json is populated.
      # The entrypoint relies on common_site_config.json being populated (e.g. by NS8 or manually).
      # For initial setup without NS8, you might need to exec in and run 'bench set-config ...'
      # or ensure your DB service creates the user/db and common_site_config.json reflects that.

      # --- Redis Settings (ensure these match your redis services) ---
      - REDIS_CACHE=redis://redis-cache:6379
      - REDIS_QUEUE=redis://redis-queue:6379
      # REDIS_SOCKETIO is often the same as REDIS_QUEUE; Frappe setup will handle this.

      # --- Site Creation Settings ---
      - ENABLE_AUTO_SITE=true
      - SITES=site1.localhost,site2.localhost
      - ADMIN_PASS=admin # Default password for sites created by create_site.sh
      # - ERPNEXT_APPS_JSON_BASE64= # Optional: to pass apps.json for build-time install_apps.sh if not using repo's apps.json or APPS_JSON_URL

      # --- Other Frappe Settings ---
      - FRAPPE_SITE_NAME_HEADER=$$host # For Nginx to correctly route requests to sites if using a proxy
      - SOCKETIO_PORT=9000 # Port for Frappe socketio, ensure it matches bench config

    volumes:
      - erpnext_sites:/home/frappe/frappe-bench/sites
      - erpnext_logs:/home/frappe/frappe-bench/logs
      # You might want to mount your local apps.json for testing build-time app installation if not baked into the image
      # - ./apps.json:/home/frappe/frappe-bench/apps.json # This is read by install_apps.sh at build time if present in context.
                                                          # For runtime, apps are already part of the image.
    ports:
      - "8000:8000" # Expose Frappe's gunicorn port directly for testing
    depends_on:
      db:
        condition: service_healthy
      redis-cache:
        condition: service_started
      redis-queue:
        condition: service_started
    # The image ENTRYPOINT is ["/usr/local/bin/entrypoint.sh"] and CMD is ["start"] by default.
    # To test site creation manually (if ENABLE_AUTO_SITE=false or for specific args):
    #   docker-compose exec erpnext create-site
    # To run other bench commands:
    #   docker-compose exec erpnext bench --site site1.localhost list-apps
    #   docker-compose exec erpnext bench backup --with-files

  db:
    image: mariadb:10.6
    container_name: erpnext_db
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--password=${MYSQL_ROOT_PASSWORD}"]
      interval: 10s # Increased interval for less aggressive health checks
      timeout: 5s
      retries: 5
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: admin # Change this in production!
    volumes:
      - db_data:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed # Specific to MariaDB 10.6 issues

  redis-cache:
    image: redis:6.2-alpine
    container_name: erpnext_redis_cache
    restart: unless-stopped
    volumes:
      - redis_cache_data:/data
    healthcheck: # New healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-queue:
    image: redis:6.2-alpine
    container_name: erpnext_redis_queue
    restart: unless-stopped
    volumes:
      - redis_queue_data:/data
    healthcheck: # New healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  erpnext_sites: # Stores site-specific data, apps, configs
  erpnext_logs:  # Stores Frappe logs
  db_data:       # MariaDB persistent data
  redis_cache_data: # Redis cache persistent data (optional)
  redis_queue_data: # Redis queue persistent data (optional)
